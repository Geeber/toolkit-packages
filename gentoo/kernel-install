#!/bin/sh

# Ensure that the user is root.
if [[ $USER -ne "root" ]]; then
    echo "Must be root to install a new kernel!"
    exit 1
fi

# Kernel artifacts.
SRC_DIR="/usr/src/linux"
KERNEL_CONFIG=$SRC_DIR/.config
KERNEL_IMAGE=$SRC_DIR/arch/i386/boot/bzImage

if [[ ! -f "$KERNEL_CONFIG" ]]; then
    echo "Kernel has not been configured!"
    exit 1
fi

# Parse kernel version from config file.
KERNEL_VERSION=$(head $KERNEL_CONFIG | grep -m 1 -i 'kernel' | grep -o -P '\d+\.\d+\.\d+\-\w+(\-r\d+)?')
if [[ -z $KERNEL_VERSION ]]; then
    echo "Could not determine kernel version!"
    exit 1
fi

# Build kernel.
echo "Building kernel $KERNEL_VERSION..."
cd $SRC_DIR && make

if [[ $? != 0 || ! -f "$KERNEL_IMAGE" ]]; then
    echo "Error building kernel!"
    exit 1
fi

# Determine size of artifacts.
ARTIFACT_SIZE=$(ls -sL1 $KERNEL_CONFIG $KERNEL_IMAGE | awk '{ SIZE += $1 } END { print SIZE }')
echo "Built kernel image and config occupying $ARTIFACT_SIZE blocks"

# Boot directory configuration.
BOOT_DIR="/boot"
BOOT_PARTITION=$(grep $BOOT_DIR /etc/fstab | awk '{ print $1 }')

# Mount boot if needed.
if [[ -n $BOOT_PARTITION ]]; then
    if [[ -z $(mount | grep $BOOT_PARTITION) ]]; then
        echo "Mounting boot partition $BOOT_PARTITION..."
        mount $BOOT_PARTITION
    else
        echo "$BOOT_PARTITION is already mounted"
    fi

    # Check boot filesystem usage.
    BOOT_FREE=$(df $BOOT_PARTITION | tail -n 1 | awk '{ print $4 }')
    echo "Boot partition $BOOT_PARTITION has $BOOT_FREE blocks available"
    if [[ $BOOT_FREE -le $ARTIFACT_SIZE ]]; then
        echo "WARNING: $BOOT_PARTITION does not have enough space for kernel artifacts!"
        exit 1
    fi
fi

# Copy kernel image and config file.
echo "Copying kernel artifacts..."
cp $KERNEL_CONFIG $BOOT_DIR/config-$KERNEL_VERSION
cp $KERNEL_IMAGE  $BOOT_DIR/kernel-$KERNEL_VERSION

# Regenerate grub2 configuration.
grub2-mkconfig -o /boot/grub/grub.cfg

# Unmount boot if needed.
if [[ -n $BOOT_PARTITION ]]; then
    echo "Unmounting $BOOT_PARTITION..."
    umount $BOOT_PARTITION
fi

# Install built kernel modules.
echo "Installing modules..."
cd $SRC_DIR && make modules_install
if [[ $? != 0 ]]; then
    echo "Error installing kernel modules!"
    exit 1
fi

# Re-emerge packages with modules.
echo "Recompiling module-dependent packages..."
emerge @module-rebuild

echo "Done installing new kernel!"
