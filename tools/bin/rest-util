#!/usr/bin/env ruby

# This is a utility script for making JSON/HTTP requests to a REST-style
# service endpoint.
#
# Author:: Greg Look

require 'optparse'



##### OPTIONS #####

CURL_BIN = "/usr/bin/curl"
SCRIPT_NAME = File.basename($0)
PROTOCOLS = [:http, :https]
HTTP_METHODS = [:HEAD, :GET, :PUT, :POST, :DELETE, :OPTIONS]
MIME_TYPES = {
  :json => "application/json",
  :edn  => "application/edn",
  :yaml => "application/yaml",
  :html => "text/html"
}

# default options
$options = {
    :method => :GET,
    :url => nil,
    :accept => :json,
    :content => :json,
    :insecure => false
}

# parse command-line options
opts = OptionParser.new do |opts|
  opts.banner = "Usage: #{SCRIPT_NAME} [options] [method] <url> [data]"
  opts.separator ""
  opts.separator "Connection Options:"
  opts.on('-s', "--show-headers", "Show response header data") { $options[:show_headers] = true }
  opts.on('-k', "--insecure", "Allow TLS connections which are not trusted by installed CAs") { $options[:insecure] = true }
  opts.separator ""
  opts.separator "Data Options:"
  opts.on('-a', "--accept FORMAT", MIME_TYPES.keys, "Specifies the format of data to accept (default: #{$options[:accept]})") {|format| $options[:accept] = format }
  opts.on('-c', "--content FORMAT", MIME_TYPES.keys, "Specifies the format of data being sent (default: #{$options[:content]})") {|format| $options[:content] = format }
  opts.on('-i', "--input PATH", "Uploads the file contents as the request body") {|path| $options[:in_file] = path }
  opts.on('-o', "--output PATH", "Writes the response data to a file") {|path| $options[:out_file] = path }
  opts.separator ""
  opts.separator "General Options:"
  opts.on('-v', "--verbose", "Show detailed request information") { $options[:verbose] = true }
  opts.on('-p', "--pretend", "Print curl command instead of executing it") { $options[:pretend] = true }
  opts.on('-h', "--help", "Display usage information") { puts opts; exit }
  opts.separator ""
  opts.separator "Arguments:"
  opts.separator "The URI path must be given and must begin with a forward slash."
  opts.separator "The HTTP method defaults to GET. If specified, it must be one of: #{HTTP_METHODS.join(', ')}"
  opts.separator "PUT and POST requests accept an additional argument, which is sent as the request body."
  opts.separator ""
  opts.separator "Examples:"
  opts.separator "  $ #{SCRIPT_NAME} http://host/resource/"
  opts.separator "  $ #{SCRIPT_NAME} -f json put http://host/resource/item '{\"description\":\"Test item\"}'"
  opts.separator "  $ #{SCRIPT_NAME} post http://host/resource/subresource/ -i path/to/data.txt"
  opts.separator "  $ #{SCRIPT_NAME} delete http://host/resource/item"
end
opts.parse!

# helper method to report failures
def fail(msg, code=1)
  STDERR.puts msg
  exit code
end

# determine method and URL
if ARGV.empty?
  puts opts
  exit 1
else
  # if there are multiple arguments, interpret the first as the method
  $options[:method] = ARGV.shift.upcase.intern if ARGV.count > 1
  fail "Invalid HTTP method: #{$options[:method]}" unless HTTP_METHODS.include? $options[:method]

  # next arg is the resource location
  fail "You must specify a URI or path" if ARGV.empty?
  $options[:url] = ARGV.shift
end

# build curl command
command = []

# common options
command << CURL_BIN
command << "--silent"
command << "--header 'Accept: #{MIME_TYPES[$options[:accept]]}'"
command << "--header 'Content-Type: #{MIME_TYPES[$options[:content]]}'" if [:PUT, :POST].include?($options[:method])
command << "--insecure" if $options[:insecure]
command << "--include" if $options[:show_headers]
command << "--verbose" if $options[:verbose]

# set method
command << case $options[:method]
  when :HEAD then "--head"
  else "-X #{$options[:method].to_s.upcase}"
end

# input data
data_arg = ARGV.shift if ARGV.first && [:PUT, :POST].include?($options[:method])
if $options[:in_file] || data_arg
  #command << "--header 'Content-Type: #{MIME_TYPE_JSON}'" # this makes Coral respond with <UnknownOperation/>
  if $options[:in_file]
    fail "Cannot use both input file and argument data" if data_arg
    command << "-T #{$options[:in_file]}"
  else
    command << "-d '#{data_arg}'"
  end
end

# output data
command << "-o #{$options[:out_file]}" if $options[:out_file]

# format url
command << "\"#{$options[:url]}\""

# command execution
command = command.join(' ')
if $options[:pretend]
  puts command
else
  start = Time.now
  output = %x{#{command}}
  elapsed = 1000*(Time.now - start)
  puts "%.1f ms" % elapsed if $options[:verbose]

  if $?.success?
    puts output
  else
    message = case $?.exitstatus
              when  3 then "URL malformed: #{url}"
              when  6 then "Couldn't resolve host: #{$options[:host]}"
              when  7 then "Couldn't connect to host: #{$options[:host]}"
              when 28 then "Operation timed out after #{elapsed} ms"
              when 35 then "SSL connection handshake failed"
              when 47 then "Too many redirects"
              when 51 then "Peer SSL certificate or MD5 fingerprint is invalid"
              when 52 then "No response from server"
              when 60 then "Peer certificate cannot be authenticated by known authorities"
              else "Unknown curl error #{$?.exitstatus}"
              end
    fail message, $?.exitstatus
  end
end
