; vim: filetype=clojure

(logging/init :file "/var/log/riemann/riemann.log")

; Listen on the local interface over TCP (5555), UDP (5555), and websockets
; (5556)
(let [host "0.0.0.0"]
  (tcp-server :host host)
  (udp-server :host host)
  (ws-server  :host host))

; Expire old events from the index every N seconds.
(periodically-expire 10)


(defn pop-service
  "Returns a new service with the last component removed."
  [service]
  (->>
    (clojure.string/split service #"\s+")
    butlast
    (clojure.string/join \space)))


(defn alter-service
  "Modifies events' service by replacing the last component with the one given."
  [event suffix]
  (assoc event :service
    (-> event
        :service
        pop-service
        (str \space suffix))))


(defn bytes->kbps
  "Convert byte count metrics into kbps. Rate is calculated every t seconds."
  [t & children]
  (scale (/ 8 1024)
    (rate t
      (apply smap #(alter-service % "kbps")
        children))))


; Keep events in the index for 5 minutes by default.
(let [index (default :ttl 300 (index))]

  ; Inbound events will be passed to these streams:
  (streams

    ; Index all events immediately.
    index

    ; Calculate network traffic in kbps
    (where (and (tagged "net") (service #"[rt]x bytes$"))
      (by [:service]
        (bytes->kbps 10
          (with {:ttl 30}
            index))))

    ; Calculate an overall rate of events.
    (with {:metric 1 :host nil :state "ok" :service "events/sec" :ttl 20}
      (rate 10 index))

    ; Log expired events.
    (expired
      (fn [event] (info "expired" event)))
))
